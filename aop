aop：面向切面编程 Aspect Oriented Programming 。

aop涉及的注解（annotation）：
@Aspect 切面
@PointCut 切点（切入点）
@Before 切点之前执行
@After  切点之后执行
@AfterReturning 切点执行成功后执行 
@AfterThrowing  切点抛出异常后执行

aop的相关概念：
1.通知、增强处理（Advice）： 就是你想要的功能，你给先定义好，然后在想用的地方用一下，包含Aspect的一段处理代码。
2.连接点（JoinPoint）： 就是spring允许你是通知（Advice）的地方，基本每个方法的前、后（两者都有也行），或抛出异常时都可以是连接点，
spring只支持方法连接点。其他如AspectJ还可以让你在构造器或属性注入时都行，不过只要记住，和方法有关的前前后后都是连接点。
连接点就是为了获取切点方法的相关信息（所在的类、入参、方法等）
3.切入点（Pointcut） ：上面说的连接点的基础上，来定义切入点，你的一个类里，有15个方法，
那就有十几个连接点了，但是并不想在所有方法附近都使用通知（使用叫织入），只是想让其中几个，
在调用这几个方法之前、之后或者抛出异常时干点什么，那么就用切入点来定义这几个方法，让切点来筛选连接点，选中那几个你想要的方法。
4.切面（Aspect） ：切面是通知和切入点的结合。连接点就是为了方便理解切点的，明白这个概念就行了。
通知说明了干什么和什么时候干（什么时候通过方法名中的befor，after，around等就能知道），切入点说明了在哪干（指定到底是哪个方法），
这就是一个完整的切面定义。

！-------------example-------------

要想把一个类变成切面类，需要两步， 
1.在类上使用 @Component 注解 把切面类加入到IOC容器中 
2.在类上使用 @Aspect 注解 使之成为切面类

-------example1-----------
@Component
@Aspect
public class LoggingAspect {
 
    /**
     * 前置通知：目标方法执行之前执行以下方法体的内容 
     * @param jp
     */
    @Before("execution(* com.qcc.beans.aop.*.*(..))")
    public void beforeMethod(JoinPoint jp){
        String methodName = jp.getSignature().getName();
        System.out.println("【前置通知】the method 【" + methodName + "】 begins with " + Arrays.asList(jp.getArgs()));
    }
 
    /**
     * 返回通知：目标方法正常执行完毕时执行以下代码
     * @param jp
     * @param result
     */
    @AfterReturning(value="execution(* com.qcc.beans.aop.*.*(..))",returning="result")
    public void afterReturningMethod(JoinPoint jp, Object result){
        String methodName = jp.getSignature().getName();
        System.out.println("【返回通知】the method 【" + methodName + "】 ends with 【" + result + "】");
    }
 
    /**
     * 后置通知：目标方法执行之后执行以下方法体的内容，不管是否发生异常。
     * @param jp
     */
    @After("execution(* com.qcc.beans.aop.*.*(..))")
    public void afterMethod(JoinPoint jp){
        System.out.println("【后置通知】this is a afterMethod advice...");
    }
 
    /**
     * 异常通知：目标方法发生异常的时候执行以下代码
     */
    @AfterThrowing(value="execution(* com.qcc.beans.aop.*.*(..))",throwing="e")
    public void afterThorwingMethod(JoinPoint jp, NullPointerException e){
        String methodName = jp.getSignature().getName();
        System.out.println("【异常通知】the method 【" + methodName + "】 occurs exception: " + e);
    }
 
  /**
   * 环绕通知：目标方法执行前后分别执行一些代码，发生异常的时候执行另外一些代码
   * @return 
   */
  @Around(value="execution(* com.qcc.beans.aop.*.*(..))")
  public Object aroundMethod(ProceedingJoinPoint jp){
      String methodName = jp.getSignature().getName();
      Object result = null;
      try {
          System.out.println("【环绕通知中的--->前置通知】：the method 【" + methodName + "】 begins with " + Arrays.asList(jp.getArgs()));
          //执行目标方法
          result = jp.proceed();
         System.out.println("【环绕通知中的--->返回通知】：the method 【" + methodName + "】 ends with " + result);
      } catch (Throwable e) {
          System.out.println("【环绕通知中的--->异常通知】：the method 【" + methodName + "】 occurs exception " + e);
      }
      
      System.out.println("【环绕通知中的--->后置通知】：-----------------end.----------------------");
      return result;
  }
  -----------------------------------------------
  
  
  ---------------example2------------
  @Aspect //声明切面，标记类  
  public class Wly {  

  @Pointcut("execution(* *.perform(..))") //定义切点，标记方法  
  public void performance() {}  

  @Before("performance()")  //切点之前执行  
  public ....        

  @AfterReturning("performance()")  //切点执行成功之后执行  
  public ...  
  
  @After("....")   // 在切点之后执行，无论方法执行成功与否
  public 
  
  @AfterThrowing("performance()")  //切点抛出异常后执行  
  public ...  
  }  
 
 也可以这样写：
  @AfterReturning(pointcut = "updateFunctionRightPointCut()",returning = "rvt")
  public void afterUpdateFunctionRight(JoinPoint joinPoint,String rvt) {
    **// 此方法是在切入点方法执行之后执行**
        // joinPoint.getArgs() 就是获取切入点方法的入参
        // rvt 就是切入点方法的返回值
 
  }
  
  或者是这样
  @Before(execution(* com.qcc.beans.aop.*.*(..))
  public void Before(JointPoint jointPoint){
  }
  
  -------------------------------------
  
  Java5.0定义了4个标准的元注解meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：
  元注解是在注解上的注解。
 
 java.lang.annotation：
  @Target
　@Retention
　@Documented
　@Inherited。
 
  @Target:用户描述注解的作用范围
　　取值(ElementType)有：
　　　　1.CONSTRUCTOR:用于描述构造器
　　　　2.FIELD:用于描述域
　　　　3.LOCAL_VARIABLE:用于描述局部变量
　　　　4.METHOD:用于描述方法
　　　　5.PACKAGE:用于描述包
　　　　6.PARAMETER:用于描述参数
　　　　7.TYPE:用于描述类、接口(包括注解类型) 或enum声明
    
  @Retention:表示需要在什么级别保存该注释信息的取值（RetentionPoicy）有：
　　　　1.SOURCE:在源文件中有效（即源文件保留）
　　　　2.CLASS:在class文件中有效（即class保留）
　　　　3.RUNTIME:在运行时有效（即运行时保留）(常用)
    
　@Documented：Documented是一个标记注解
 
　@Inherited :用于声明一个注解；

  自定义注解语法:public @interface 注解名 {定义体}

  @Target(ElementType.METHOD) 方法级作用
  @Retention(RetentionPolicy.RUNTIME) 运行时作用
  @Documented 标记注解
  public @interface SysLog {
    String value() default ""; //元素是value ，默认值为 “ ”
    String retrunType() default "类型"; //同上
}
使用方法：
   @SysLog(value="用户登录",returnType="test")
	 @RequestMapping("/main/index")
	    public String index(){
	        return "main/index";
	    }
      
      
@PointCut 注解的用法
格式：
@PointCut(execution(* *.perform(..)))

execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)throws-pattern?) 
括号中各个pattern分别表示：

修饰符匹配（modifier-pattern?）
返回值匹配（ret-type-pattern）可以为*表示任何返回值,全路径的类名等
类路径匹配（declaring-type-pattern?）
方法名匹配（name-pattern）可以指定方法名 或者 *代表所有, set* 代表以set开头的所有方法
参数匹配（(param-pattern)）可以指定具体的参数类型，多个参数间用“,”隔开，各个参数也可以用“*”来表示匹配任意类型的参数，如(String)表示匹配一个String参数的方法；(*,String) 表示匹配有两个参数的方法，第一个参数可以是任意类型，而第二个参数是String类型；可以用(..)表示零个或多个任意参数
异常类型匹配（throws-pattern?）
其中后面跟着“?”的是可选项

execution(* *(..))  
//表示匹配所有方法  
execution(public * com. savage.service.UserService.*(..))  
//表示匹配com.savage.server.UserService中所有的公有方法  
execution(* com.savage.server..*.*(..))  
//表示匹配com.savage.server包及其子包下的所有方法 

可以使用||，&&和！

@Pointcut("logSender() || logReceiver()")

@PointCut里除了execution，还有这些描述符：
this是用来限定方法所属的类
this(com.tianmaying.service.BlogServiceInterface)表示实现了com.tianmaying.service.BlogServiceInterface的所有类。如果this括号内是具体类而不是接口的话，则表示单个类。
@annotation表示具有某个标注的方法，比如@annotation(org.springframework.transaction.annotation.Transactional)表示被Transactional标注的方法
args 表示方法的参数属于一个特定的类
within 表示方法属于一个特定的类
target 表示方法所属的类


使用aop需加入包：

 
 
 
 
